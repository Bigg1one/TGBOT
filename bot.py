import logging
from aiogram import Bot, Dispatcher, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from sqlalchemy import create_engine, Column, Integer, String
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
from aiogram.exceptions import TelegramAPIError



# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
API_TOKEN = '7366433284:AAHB6nIivgCuoOxred3GwmU3AJZNUaKkCRI'
ADMIN_IDS = [2071450782]  # –£–∫–∞–∂–∏—Ç–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
bot = Bot(token=API_TOKEN)
dp = Dispatcher(storage=MemoryStorage())
engine = create_engine('sqlite:///tickets.db')
Base = declarative_base()
Session = sessionmaker(bind=engine)
db_session = Session()

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Ç–∏–∫–µ—Ç–æ–≤
class Ticket(Base):
    __tablename__ = 'tickets'
    id = Column(Integer, primary_key=True)
    user_id = Column(Integer, nullable=False)
    username = Column(String, nullable=True)
    theme = Column(String, nullable=False)
    question = Column(String, nullable=False)
    status = Column(String, default='open')  # open, in_progress, closed
    admin_id = Column(Integer, nullable=True)
    admin_name = Column(String, nullable=True)  # –ò–º—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    admin_response = Column(String, nullable=True)  # –û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞


Base.metadata.create_all(engine)

# FSM States
class TicketStates(StatesGroup):
    selecting_theme = State()
    entering_question = State()
    answering_ticket = State()

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
async def notify_admins(ticket: Ticket):
    """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –Ω–æ–≤–æ–º —Ç–∏–∫–µ—Ç–µ."""
    for admin_id in ADMIN_IDS:
        await bot.send_message(
            admin_id,
            f"–ù–æ–≤—ã–π —Ç–∏–∫–µ—Ç #{ticket.id}\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{ticket.username or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'} (ID: {ticket.user_id})\n"
            f"–¢–µ–º–∞: {ticket.theme}\n"
            f"–í–æ–ø—Ä–æ—Å: {ticket.question}\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç–∏–∫–µ—Ç—ã."
        )

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command(commands=["start"]))
async def start_handler(message: types.Message):
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("–°–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç"))
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–∂–º–∏—Ç–µ '–°–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç', —á—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å.", reply_markup=kb)

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞
@dp.message(lambda message: message.text == "–°–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç")
async def create_ticket(message: types.Message, state: FSMContext):
    themes = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–±–ª–µ–º–∞", callback_data="theme:–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–±–ª–µ–º–∞")],
            [InlineKeyboardButton(text="–°–ø–∞–º", callback_data="theme:–°–ø–∞–º")],
            [InlineKeyboardButton(text="–û–±—â–∏–π –≤–æ–ø—Ä–æ—Å", callback_data="theme:–û–±—â–∏–π –≤–æ–ø—Ä–æ—Å")]
        ]
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É —Ç–∏–∫–µ—Ç–∞:", reply_markup=themes)
    await state.set_state(TicketStates.selecting_theme)

@dp.callback_query(lambda c: c.data.startswith("theme:"), TicketStates.selecting_theme)
async def set_theme(callback_query: types.CallbackQuery, state: FSMContext):
    theme = callback_query.data.split(":")[1]
    await state.update_data(theme=theme)
    await bot.send_message(callback_query.from_user.id, "–û–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:")
    await state.set_state(TicketStates.entering_question)

@dp.message(TicketStates.entering_question)
async def save_question(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    ticket = Ticket(
        user_id=message.from_user.id,
        username=message.from_user.username or "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
        theme=user_data['theme'],
        question=message.text
    )
    db_session.add(ticket)
    db_session.commit()
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await message.answer("–í–∞—à —Ç–∏–∫–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    await notify_admins(ticket)
    
    await state.clear()

# –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@dp.message(Command(commands=["admin"]))
async def admin_panel(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    tickets = db_session.query(Ticket).filter(Ticket.status != 'closed').all()

    if not tickets:
        await message.answer("–ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤.")
        return

    for ticket in tickets:
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–µ –∏ –æ—Ç–≤–µ—Ç–µ
        status = "üü¢ –û—Ç–∫—Ä—ã—Ç" if ticket.status == 'open' else "üü° –í –ø—Ä–æ—Ü–µ—Å—Å–µ"
        admin_info = f"\n–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {ticket.admin_name or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}" if ticket.admin_name else ""
        response_info = f"\n–û—Ç–≤–µ—Ç: {ticket.admin_response}" if ticket.admin_response else ""

        # –ò–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –∏ –∑–∞–∫—Ä—ã—Ç–∏—è —Ç–∏–∫–µ—Ç–∞
        inline_kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"ticket:{ticket.id}")],
                [InlineKeyboardButton(text="–ó–∞–∫—Ä—ã—Ç—å", callback_data=f"close:{ticket.id}")]
            ]
        )
        await message.answer(
            f"–¢–∏–∫–µ—Ç #{ticket.id}\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{ticket.username}\n"
            f"–¢–µ–º–∞: {ticket.theme}\n"
            f"–í–æ–ø—Ä–æ—Å: {ticket.question}\n"
            f"–°—Ç–∞—Ç—É—Å: {status}{admin_info}{response_info}",
            reply_markup=inline_kb
        )


@dp.message(TicketStates.answering_ticket)
async def answer_ticket(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    ticket_id = user_data.get('ticket_id')
    ticket = db_session.query(Ticket).get(ticket_id)

    if not ticket:
        await message.answer("–¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        logging.warning(f"–¢–∏–∫–µ—Ç —Å ID {ticket_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Ç–∏–∫–µ—Ç
    ticket.admin_response = message.text
    ticket.status = 'closed'

    try:
        db_session.commit()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        logging.info(f"–û—Ç–≤–µ—Ç –Ω–∞ —Ç–∏–∫–µ—Ç #{ticket.id} —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
    except Exception as e:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞.")
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç–∏–∫–µ—Ç #{ticket.id}: {e}")
        return

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ—Ç–≤–µ—Ç–µ
    await message.answer(f"–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —Ç–∏–∫–µ—Ç #{ticket.id} –∑–∞–∫—Ä—ã—Ç.")

    # –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∏–º–µ–Ω–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ –æ—Ç–≤–µ—Ç–æ–º
    try:
        await bot.send_message(
            chat_id=ticket.user_id,
            text=f"–í–∞—à —Ç–∏–∫–µ—Ç #{ticket.id} –±—ã–ª –∑–∞–∫—Ä—ã—Ç.\n\n"
                 f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {ticket.admin_name}\n"
                 f"–û—Ç–≤–µ—Ç:\n{message.text}"
        )
        logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Ç–∏–∫–µ—Ç #{ticket.id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {ticket.user_id}.")
    except TelegramAPIError as e:
        error_message = str(e)
        if "bot was blocked by the user" in error_message:
            logging.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {ticket.user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞. –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ.")
        elif "chat not found" in error_message:
            logging.error(f"–ß–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {ticket.user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ.")
        else:
            logging.error(f"–û—à–∏–±–∫–∞ Telegram API –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {ticket.user_id}: {error_message}")
    finally:
        await state.clear()









@dp.callback_query(lambda c: c.data.startswith("ticket:"))
async def view_ticket(callback_query: types.CallbackQuery, state: FSMContext):
    ticket_id = int(callback_query.data.split(":")[1])
    ticket = db_session.query(Ticket).get(ticket_id)

    if not ticket:
        await callback_query.answer("–¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    ticket.status = 'in_progress'
    ticket.admin_id = callback_query.from_user.id
    ticket.admin_name = callback_query.from_user.full_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
    db_session.commit()

    await state.update_data(ticket_id=ticket.id)
    await bot.send_message(callback_query.from_user.id, f"–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –Ω–∞ —Ç–∏–∫–µ—Ç #{ticket.id}:")
    await callback_query.answer()  # –ó–∞–∫—Ä—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
    await state.set_state(TicketStates.answering_ticket)


@dp.callback_query(lambda c: c.data.startswith("close:"))
async def close_ticket(callback_query: types.CallbackQuery):
    ticket_id = int(callback_query.data.split(":")[1])
    ticket = db_session.query(Ticket).get(ticket_id)

    if not ticket:
        await callback_query.answer("–¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    ticket.status = 'closed'
    db_session.commit()

    await callback_query.answer("–¢–∏–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç.")
    await bot.send_message(callback_query.from_user.id, f"–¢–∏–∫–µ—Ç #{ticket.id} –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç.")


if __name__ == "__main__":
    import asyncio
    asyncio.run(dp.start_polling(bot))
