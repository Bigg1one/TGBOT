import logging
from aiogram import Bot, Dispatcher, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters.command import Command
from sqlalchemy import create_engine, Column, Integer, String
from sqlalchemy.orm import declarative_base
from sqlalchemy.orm import sessionmaker
from aiogram.exceptions import TelegramAPIError
from aiogram.types import BotCommand
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.types import BotCommand, BotCommandScopeDefault, BotCommandScopeChat



# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
API_TOKEN = '7366433284:AAHB6nIivgCuoOxred3GwmU3AJZNUaKkCRI'
ADMIN_IDS = [2071450782,1943086182]  # –£–∫–∞–∂–∏—Ç–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
# 1943086182
# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
bot = Bot(token=API_TOKEN)
dp = Dispatcher(storage=MemoryStorage())
engine = create_engine('sqlite:///tickets.db')
Base = declarative_base()
Session = sessionmaker(bind=engine)
db_session = Session()

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Ç–∏–∫–µ—Ç–æ–≤
class Ticket(Base):
    __tablename__ = 'tickets'
    id = Column(Integer, primary_key=True)
    user_id = Column(Integer, nullable=False)
    username = Column(String, nullable=True)
    theme = Column(String, nullable=False)
    question = Column(String, nullable=False)
    status = Column(String, default='open')  # open, in_progress, closed
    admin_id = Column(Integer, nullable=True)
    admin_name = Column(String, nullable=True)  # –ò–º—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    admin_response = Column(String, nullable=True)  # –û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞


Base.metadata.create_all(engine)

# FSM States
class TicketStates(StatesGroup):
    selecting_theme = State()
    entering_question = State()
    answering_ticket = State()

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
async def notify_admins(ticket: Ticket):
    """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –Ω–æ–≤–æ–º —Ç–∏–∫–µ—Ç–µ."""
    all_admin_ids = set(ADMIN_IDS)
    db_admins = db_session.query(Admin).all()

    for admin in db_admins:
        all_admin_ids.add(admin.id)

    for admin_id in all_admin_ids:
        try:
            await bot.send_message(
                admin_id,
                f"üîî <b>–ù–æ–≤—ã–π —Ç–∏–∫–µ—Ç #{ticket.id}</b>\n\n"
                f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> @{ticket.username or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'} (ID: {ticket.user_id})\n"
                f"‚öôÔ∏è <b>–¢–µ–º–∞:</b> {ticket.theme}\n\n"
                f"üí¨ <b>–í–æ–ø—Ä–æ—Å:</b> {ticket.question or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n"
                "üõ° <b>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç–∏–∫–µ—Ç—ã.</b>",
                parse_mode="HTML"
            )
        except TelegramAPIError as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")



# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command(commands=["start"]))
async def start_handler(message: types.Message):
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚úçÔ∏è –°–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç")]  # –î–æ–±–∞–≤–ª–µ–Ω —Å—Ç–∏–∫–µ—Ä ‚úçÔ∏è
        ],
        resize_keyboard=True
    )
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–∂–º–∏—Ç–µ '–°–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç', —á—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å.", reply_markup=kb)


# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞
@dp.message(lambda message: message.text == "‚úçÔ∏è –°–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç")
async def create_ticket(message: types.Message, state: FSMContext):
    themes = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚öôÔ∏è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–±–ª–µ–º–∞", callback_data="theme:–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–±–ª–µ–º–∞")],
            [InlineKeyboardButton(text="üö´ –°–ø–∞–º", callback_data="theme:–°–ø–∞–º")],
            [InlineKeyboardButton(text="‚ùì –û–±—â–∏–π –≤–æ–ø—Ä–æ—Å", callback_data="theme:–û–±—â–∏–π –≤–æ–ø—Ä–æ—Å")]
        ]
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É —Ç–∏–∫–µ—Ç–∞:", reply_markup=themes)
    await state.set_state(TicketStates.selecting_theme)


@dp.callback_query(lambda c: c.data.startswith("theme:"), TicketStates.selecting_theme)
async def set_theme(callback_query: types.CallbackQuery, state: FSMContext):
    theme = callback_query.data.split(":")[1]
    await state.update_data(theme=theme)
    await bot.send_message(callback_query.from_user.id, "–û–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:")
    await state.set_state(TicketStates.entering_question)

@dp.message(TicketStates.entering_question)
async def save_question(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    ticket = Ticket(
        user_id=message.from_user.id,
        username=message.from_user.username or "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
        theme=user_data['theme'],
        question=message.text
    )
    db_session.add(ticket)
    db_session.commit()
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await message.answer("–í–∞—à —Ç–∏–∫–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    await notify_admins(ticket)
    
    await state.clear()

# –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@dp.message(Command(commands=["admin"]))
async def admin_panel(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        existing_admin = db_session.query(Admin).filter(Admin.id == message.from_user.id).first()
        if not existing_admin:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
            return

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤
    tickets = db_session.query(Ticket).filter(Ticket.status != 'closed').all()

    if not tickets:
        await message.answer("üü¢ –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤.")
        return

    for ticket in tickets:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–∏–∫–µ—Ç–∞
        status = "üü¢ –û—Ç–∫—Ä—ã—Ç" if ticket.status == 'open' else f"üü° –í –ø—Ä–æ—Ü–µ—Å—Å–µ (–ê–¥–º–∏–Ω: {ticket.admin_name or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'})"

        # –ò–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∏–∫–µ—Ç–æ–º
        inline_kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚úçÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"ticket:{ticket.id}")],
                [InlineKeyboardButton(text="‚úÖ –ó–∞–∫—Ä—ã—Ç—å", callback_data=f"close:{ticket.id}")]
            ]
        )

        # –°–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ —Ç–∏–∫–µ—Ç–∞
        await message.answer(
            f"üìù <b>–¢–∏–∫–µ—Ç #{ticket.id}</b>\n\n"
            f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> @{ticket.username or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'} (ID: {ticket.user_id})\n"
            f"‚öôÔ∏è <b>–¢–µ–º–∞:</b> {ticket.theme}\n"
            f"üí¨ <b>–í–æ–ø—Ä–æ—Å:</b> {ticket.question or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n"
            f"üîí <b>–°—Ç–∞—Ç—É—Å:</b> {status}",
            reply_markup=inline_kb,
            parse_mode="HTML"
        )




@dp.message(Command(commands=["closed_tickets"]))
async def closed_tickets(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        existing_admin = db_session.query(Admin).filter(Admin.id == message.from_user.id).first()
        if not existing_admin:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
            return

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫—Ä—ã—Ç—ã–µ —Ç–∏–∫–µ—Ç—ã
    tickets = db_session.query(Ticket).filter(Ticket.status == 'closed').all()

    if not tickets:
        await message.answer("üî¥ –ù–µ—Ç –∑–∞–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤.")
        return

    # –í—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    await send_ticket_page(message, tickets, page=1)


async def send_ticket_page(message, tickets, page):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –∑–∞–∫—Ä—ã—Ç—ã–º–∏ —Ç–∏–∫–µ—Ç–∞–º–∏."""
    offset = (page - 1) * TICKETS_PER_PAGE
    paginated_tickets = tickets[offset:offset + TICKETS_PER_PAGE]

    if not paginated_tickets:
        await message.answer("–ë–æ–ª—å—à–µ –∑–∞–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤ –Ω–µ—Ç.")
        return

    for ticket in paginated_tickets:
        await message.answer(
            f"‚úÖ <b>–¢–∏–∫–µ—Ç #{ticket.id}</b>\n\n"
            f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> @{ticket.username or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'} (ID: {ticket.user_id})\n"
            f"‚öôÔ∏è <b>–¢–µ–º–∞:</b> {ticket.theme}\n"
            f"üí¨ <b>–í–æ–ø—Ä–æ—Å:</b> {ticket.question}\n\n"
            f"üîí <b>–°—Ç–∞—Ç—É—Å:</b> –ó–∞–∫—Ä—ã—Ç\n"
            f"üë©üèº‚Äçüíª <b>–û—Ç–≤–µ—Ç–∏–ª:</b> {ticket.admin_name or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
            f"üìã <b>–û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>\n{ticket.admin_response or '–û—Ç–≤–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.'}",
            parse_mode="HTML"
        )

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
    navigation_kb = InlineKeyboardMarkup(inline_keyboard=[])

    if page > 1:
        navigation_kb.inline_keyboard.append(
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", callback_data=f"closed_page:{page - 1}")]
        )
    if len(tickets) > offset + TICKETS_PER_PAGE:
        navigation_kb.inline_keyboard.append(
            [InlineKeyboardButton(text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", callback_data=f"closed_page:{page + 1}")]
        )

    await message.answer(f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}", reply_markup=navigation_kb)



@dp.callback_query(lambda c: c.data.startswith("closed_page:"))
async def paginate_closed_tickets(callback_query: types.CallbackQuery):
    page = int(callback_query.data.split(":")[1])
    tickets = db_session.query(Ticket).filter(Ticket.status == 'closed').all()

    await callback_query.answer()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
    await send_ticket_page(callback_query.message, tickets, page)



@dp.message(TicketStates.answering_ticket)
async def answer_ticket(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    ticket_id = user_data.get('ticket_id')
    ticket = db_session.get(Ticket, ticket_id)

    if not ticket:
        await message.answer("–¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        logging.warning(f"–¢–∏–∫–µ—Ç —Å ID {ticket_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Ç–∏–∫–µ—Ç
    ticket.admin_response = message.text
    ticket.status = 'closed'
    ticket.admin_name = message.from_user.full_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
    try:
        db_session.commit()
        logging.info(f"–û—Ç–≤–µ—Ç –Ω–∞ —Ç–∏–∫–µ—Ç #{ticket.id} —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
    except Exception as e:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞.")
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç–∏–∫–µ—Ç #{ticket.id}: {e}")
        return

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    admin = db_session.query(Admin).filter(Admin.username == message.from_user.username).first()
    if admin:
        admin.closed_tickets += 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤
        db_session.commit()

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ—Ç–≤–µ—Ç–µ
    await message.answer(
        f"‚úÖ –û—Ç–≤–µ—Ç –Ω–∞ —Ç–∏–∫–µ—Ç #{ticket.id} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.\n\n"
        f"‚ÑπÔ∏è –ù–∞–∂–º–∏—Ç–µ /closed_tickets, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–∫—Ä—ã—Ç—ã–µ —Ç–∏–∫–µ—Ç—ã."
    )

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Ç–∏–∫–µ—Ç–∞
    try:
        await bot.send_message(
            chat_id=ticket.user_id,  # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            text=(
                f"‚úÖ <b>–í–∞—à —Ç–∏–∫–µ—Ç #{ticket.id} –±—ã–ª –∑–∞–∫—Ä—ã—Ç</b>\n\n"
                f"üë©üèº‚Äçüíª <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:</b> {ticket.admin_name}\n"
                f"üí¨ <b>–û—Ç–≤–µ—Ç:</b>\n{ticket.admin_response or '–û—Ç–≤–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.'}"
            ),
            parse_mode="HTML"
        )
        logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç–≤–µ—Ç–æ–º —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {ticket.user_id}.")
    except TelegramAPIError as e:
        if "bot was blocked by the user" in str(e):
            logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {ticket.user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞. –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ.")
        elif "chat not found" in str(e):
            logging.warning(f"–ß–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {ticket.user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ.")
        else:
            logging.error(f"–û—à–∏–±–∫–∞ Telegram API –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {ticket.user_id}: {e}")

    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()







@dp.callback_query(lambda c: c.data.startswith("ticket:"))
async def view_ticket(callback_query: types.CallbackQuery, state: FSMContext):
    ticket_id = int(callback_query.data.split(":")[1])
    ticket = db_session.get(Ticket, ticket_id)

    if not ticket:
        await callback_query.answer("–¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    if ticket.status != 'open':
        await callback_query.answer("–≠—Ç–æ—Ç —Ç–∏–∫–µ—Ç —É–∂–µ –≤ —Ä–∞–±–æ—Ç–µ –∏–ª–∏ –∑–∞–∫—Ä—ã—Ç.", show_alert=True)
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–∏–∫–µ—Ç–∞ –Ω–∞ 'in_progress'
    ticket.status = 'in_progress'
    ticket.admin_id = callback_query.from_user.id
    ticket.admin_name = callback_query.from_user.full_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
    db_session.commit()

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –≤–∑—è–≤—à–µ–≥–æ —Ç–∏–∫–µ—Ç
    await callback_query.answer(f"–í—ã –Ω–∞—á–∞–ª–∏ —Ä–∞–±–æ—Ç—É –Ω–∞–¥ —Ç–∏–∫–µ—Ç–æ–º #{ticket.id}.")

    await bot.send_message(
        callback_query.from_user.id,
        f"üí¨ <b>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –Ω–∞ —Ç–∏–∫–µ—Ç #{ticket.id}</b>",
        parse_mode="HTML"
    )

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (–∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –∏–∑ —Å–ø–∏—Å–∫–∞ ADMIN_IDS)
    all_admin_ids = set(ADMIN_IDS)  # –ì–ª–∞–≤–Ω—ã–µ –∞–¥–º–∏–Ω—ã
    db_admins = db_session.query(Admin).all()
    for admin in db_admins:
        all_admin_ids.add(admin.id)  # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤, –∫—Ä–æ–º–µ –≤–∑—è–≤—à–µ–≥–æ —Ç–∏–∫–µ—Ç
    for admin_id in all_admin_ids:
        if admin_id != callback_query.from_user.id:
            try:
                await bot.send_message(
                    admin_id,
                    f"üõ† <b>–¢–∏–∫–µ—Ç #{ticket.id} –ø—Ä–∏–Ω—è—Ç –≤ —Ä–∞–±–æ—Ç—É</b>\n\n"
                    f"üë©üèº‚Äçüíª <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:</b> {ticket.admin_name}",
                    parse_mode="HTML"
                )
            except TelegramAPIError as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {admin_id}: {e}")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ç–∏–∫–µ—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π –≤–∑—è–ª —Ç–∏–∫–µ—Ç
    await state.update_data(ticket_id=ticket.id)
    await state.set_state(TicketStates.answering_ticket)









@dp.callback_query(lambda c: c.data.startswith("page:"))
async def paginate_tickets(callback_query: types.CallbackQuery):
    page = int(callback_query.data.split(":")[1])
    tickets_per_page = 5  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∏–∫–µ—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    offset = (page - 1) * tickets_per_page

    tickets = db_session.query(Ticket).filter(Ticket.status != 'closed').limit(tickets_per_page).offset(offset).all()

    if not tickets:
        await callback_query.answer("–ë–æ–ª—å—à–µ —Ç–∏–∫–µ—Ç–æ–≤ –Ω–µ—Ç.")
        return

    for ticket in tickets:
        status = "üü¢ –û—Ç–∫—Ä—ã—Ç" if ticket.status == 'open' else f"üü° –í –ø—Ä–æ—Ü–µ—Å—Å–µ (–ê–¥–º–∏–Ω: {ticket.admin_name or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'})"
        inline_kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"ticket:{ticket.id}")],
                [InlineKeyboardButton(text="–ó–∞–∫—Ä—ã—Ç—å", callback_data=f"close:{ticket.id}")]
            ]
        )
        await bot.send_message(
            chat_id=callback_query.from_user.id,
            text=f"–¢–∏–∫–µ—Ç #{ticket.id}\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{ticket.username or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'} (ID: {ticket.user_id})\n"
                f"–¢–µ–º–∞: {ticket.theme}\n"
                f"–í–æ–ø—Ä–æ—Å: {ticket.question}\n"
                f"–°—Ç–∞—Ç—É—Å: {status}",
            reply_markup=inline_kb
        )

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    navigation_kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="–ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", callback_data=f"page:{page - 1}") if page > 1 else None,
                InlineKeyboardButton(text="–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", callback_data=f"page:{page + 1}")
            ]
        ]
    )
    await bot.send_message(callback_query.from_user.id, "–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:", reply_markup=navigation_kb)



class Admin(Base):
    __tablename__ = 'admins'
    id = Column(Integer, primary_key=True)  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    username = Column(String, nullable=False)  # @—Ç–µ–≥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    closed_tickets = Column(Integer, default=0)  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤
    

Base.metadata.create_all(engine)




@dp.message(Command(commands=["create_adm"]))
async def create_admin(message: types.Message):
    """–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    if message.from_user.id not in ADMIN_IDS:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä ‚Äî –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    args = message.text.split()
    if len(args) < 2:
        await message.answer("–û—à–∏–±–∫–∞: —É–∫–∞–∂–∏—Ç–µ @—Ç–µ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –µ–≥–æ ID. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /create_adm @username –∏–ª–∏ /create_adm user_id.")
        return

    identifier = args[1]
    try:
        if identifier.startswith("@"):
            username = identifier[1:]  # –£–±–∏—Ä–∞–µ–º '@'
            user = db_session.query(Ticket).filter(Ticket.username == username).first()
            if not user:
                await message.answer(f"–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            user_id = user.user_id
        else:
            user_id = int(identifier)
            user = db_session.query(Ticket).filter(Ticket.user_id == user_id).first()
            if not user:
                await message.answer(f"–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            username = user.username or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
        existing_admin = db_session.query(Admin).filter(Admin.id == user_id).first()
        if existing_admin:
            await message.answer(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å ID {user_id} (@{username}) —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
            return

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        admin = Admin(id=user_id, username=username)
        db_session.add(admin)
        db_session.commit()

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ–Ω—é –¥–ª—è –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await bot.set_my_commands(
            commands=[
                BotCommand(command="/admin", description="–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"),
                BotCommand(command="/closed_tickets", description="–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤"),
                BotCommand(command="/list_admins", description="–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"),
            ],
            scope=BotCommandScopeChat(chat_id=user_id)
        )

        await message.answer(f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @{username} —Å ID {user_id} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞: —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç @username –∏–ª–∏ user_id.")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")


@dp.message(Command(commands=["delete_adm"]))
async def delete_admin(message: types.Message):
    """–£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    if message.from_user.id not in ADMIN_IDS:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä ‚Äî –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    args = message.text.split()
    if len(args) < 2:
        await message.answer("–û—à–∏–±–∫–∞: —É–∫–∞–∂–∏—Ç–µ @—Ç–µ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –µ–≥–æ ID. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /delete_adm @username –∏–ª–∏ /delete_adm user_id.")
        return

    identifier = args[1]
    try:
        if identifier.startswith("@"):
            admin = db_session.query(Admin).filter(Admin.username == identifier[1:]).first()
        else:
            user_id = int(identifier)
            admin = db_session.query(Admin).filter(Admin.id == user_id).first()

        if not admin:
            await message.answer(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {identifier} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        user_id = admin.id

        # –£–¥–∞–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        db_session.delete(admin)
        db_session.commit()

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ–Ω—é –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await bot.set_my_commands(
            commands=[
                BotCommand(command="/start", description="–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º"),
                BotCommand(command="/help", description="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ"),
            ],
            scope=BotCommandScopeChat(chat_id=user_id)
        )

        await message.answer(f"‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {identifier} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.")
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞: —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç @username –∏–ª–∏ user_id.")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")








@dp.message(Command(commands=["delete_adm"]))
async def delete_admin(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä –∫–æ–º–∞–Ω–¥—ã —è–≤–ª—è–µ—Ç—Å—è –≥–ª–∞–≤–Ω—ã–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    args = message.text.split()  # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã –Ω–∞ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    if len(args) < 2:
        await message.answer("–û—à–∏–±–∫–∞: —É–∫–∞–∂–∏—Ç–µ @—Ç–µ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –µ–≥–æ ID. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /delete_adm @username –∏–ª–∏ /delete_adm user_id.")
        return

    identifier = args[1]
    try:
        if identifier.startswith("@"):
            # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω @username
            admin = db_session.query(Admin).filter(Admin.username == identifier[1:]).first()
        else:
            # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω ID
            user_id = int(identifier)
            admin = db_session.query(Admin).filter(Admin.id == user_id).first()

        if not admin:
            await message.answer(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {identifier} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # –£–¥–∞–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        db_session.delete(admin)
        db_session.commit()
        await message.answer(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {identifier} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞: —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç @username –∏–ª–∏ user_id.")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")




@dp.message(Command(commands=["adm"]))
async def admin_stats(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä –∫–æ–º–∞–Ω–¥—ã —è–≤–ª—è–µ—Ç—Å—è –≥–ª–∞–≤–Ω—ã–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    args = message.text.split()  # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã –Ω–∞ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    if len(args) < 2:
        await message.answer("–û—à–∏–±–∫–∞: —É–∫–∞–∂–∏—Ç–µ @—Ç–µ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –µ–≥–æ ID. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /adm @username –∏–ª–∏ /adm user_id.")
        return

    identifier = args[1]
    try:
        if identifier.startswith("@"):
            # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω @username
            admin = db_session.query(Admin).filter(Admin.username == identifier[1:]).first()
        else:
            # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω ID
            user_id = int(identifier)
            admin = db_session.query(Admin).filter(Admin.id == user_id).first()

        if not admin:
            await message.answer(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {identifier} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        await message.answer(
            f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {identifier}:\n"
            f"–ó–∞–∫—Ä—ã—Ç—ã–µ —Ç–∏–∫–µ—Ç—ã: {admin.closed_tickets}"
        )
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞: —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç @username –∏–ª–∏ user_id.")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")


@dp.message(Command(commands=["list_admins"]))
async def list_admins(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏–ª–∏ –≥–ª–∞–≤–Ω—ã–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if message.from_user.id not in ADMIN_IDS:
        existing_admin = db_session.query(Admin).filter(Admin.id == message.from_user.id).first()
        if not existing_admin:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
            return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    admins = db_session.query(Admin).all()
    admin_list = "–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:\n"

    for admin in admins:
        admin_list += f"- @{admin.username} (ID: {admin.id})\n"

    # –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    admin_list += "\n–ì–ª–∞–≤–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:\n"
    for admin_id in ADMIN_IDS:
        admin_list += f"- ID: {admin_id} (–≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω)\n"

    await message.answer(admin_list)



async def set_default_menu():
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    """
    commands = [
        BotCommand(command="/start", description="–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º"),
        BotCommand(command="/help", description="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ"),
    ]
    await bot.set_my_commands(commands, scope=BotCommandScopeDefault())

async def set_admin_menu():
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.
    """
    commands = [
        BotCommand(command="/admin", description="–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"),
        BotCommand(command="/closed_tickets", description="–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤"),
        BotCommand(command="/list_admins", description="–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"),
        BotCommand(command="/help",description="–ü–æ–º–æ—â—å" ),
    ]

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ–Ω—é –¥–ª—è –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã `Admin`
    db_admins = db_session.query(Admin).all()
    for admin in db_admins:
        try:
            await bot.set_my_commands(
                commands,
                scope=BotCommandScopeChat(chat_id=admin.id),
            )
        except TelegramAPIError as e:
            logging.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–µ–Ω—é –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {admin.username} (ID: {admin.id}): {e}")

async def set_main_admin_menu():
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ –¥–ª—è –≥–ª–∞–≤–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.
    """
    commands = [
        BotCommand(command="/admin", description="–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"),
        BotCommand(command="/create_adm", description="–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"),
        BotCommand(command="/delete_adm", description="–£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"),
        BotCommand(command="/adm", description="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"),
        BotCommand(command="/list_admins", description="–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"),
        BotCommand(command="/closed_tickets", description="–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤"),
    ]

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ–Ω—é –¥–ª—è –≥–ª–∞–≤–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    for admin_id in ADMIN_IDS:
        try:
            await bot.set_my_commands(
                commands,
                scope=BotCommandScopeChat(chat_id=admin_id),
            )
        except TelegramAPIError as e:
            logging.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–µ–Ω—é –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ID {admin_id}: {e}")




@dp.callback_query(lambda c: c.data.startswith("close:"))
async def close_ticket(callback_query: types.CallbackQuery):
    ticket_id = int(callback_query.data.split(":")[1])
    ticket = db_session.get(Ticket, ticket_id)

    if not ticket:
        await callback_query.answer("–¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    if ticket.status == 'closed':
        await callback_query.answer("–≠—Ç–æ—Ç —Ç–∏–∫–µ—Ç —É–∂–µ –∑–∞–∫—Ä—ã—Ç.", show_alert=True)
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–∏–∫–µ—Ç–∞ –Ω–∞ "closed"
    ticket.status = 'closed'
    ticket.admin_id = callback_query.from_user.id
    ticket.admin_name = callback_query.from_user.full_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
    
    try:
        db_session.commit()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Ç–∏–∫–µ—Ç–∞ #{ticket_id}: {e}")
        await callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Ç–∏–∫–µ—Ç–∞.", show_alert=True)
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Ç–∏–∫–µ—Ç–∞
    await bot.send_message(
        callback_query.from_user.id,
        f"‚úÖ –¢–∏–∫–µ—Ç #{ticket.id} —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç."
    )

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Ç–∏–∫–µ—Ç–∞
    try:
        await bot.send_message(
            chat_id=ticket.user_id,
            text=(
                f"‚úÖ <b>–í–∞—à —Ç–∏–∫–µ—Ç #{ticket.id} –±—ã–ª –∑–∞–∫—Ä—ã—Ç</b>\n\n"
                f"üë©üèº‚Äçüíª <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:</b> {ticket.admin_name}"
            ),
            parse_mode="HTML"
        )
    except TelegramAPIError as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {ticket.user_id}: {e}")

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏, —É–±–∏—Ä–∞–µ–º –∏—Ö –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è —Ç–∏–∫–µ—Ç–∞
    try:
        await bot.edit_message_text(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            text=(
                f"üìù <b>–¢–∏–∫–µ—Ç #{ticket.id}</b>\n\n"
                f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> @{ticket.username or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'} (ID: {ticket.user_id})\n"
                f"‚öôÔ∏è <b>–¢–µ–º–∞:</b> {ticket.theme}\n"
                f"üí¨ <b>–í–æ–ø—Ä–æ—Å:</b> {ticket.question or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n"
                f"üîí <b>–°—Ç–∞—Ç—É—Å:</b> –ó–∞–∫—Ä—ã—Ç"
            ),
            parse_mode="HTML"
        )
        await callback_query.answer("–¢–∏–∫–µ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç.")
    except TelegramAPIError as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ç–∏–∫–µ—Ç–µ #{ticket.id}: {e}")



@dp.message(Command(commands=["help"]))
async def help_handler(message: types.Message):
    await help_handler(message)
async def help_handler(message: types.Message):
    await message.answer(
        "<b>–ü–æ–º–æ—â—å</b>\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–æ–≤ –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.\n\n"
        "<b>–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n"
        "1Ô∏è‚É£ /start ‚Äì –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º.\n"
        "2Ô∏è‚É£ ‚úçÔ∏è <b>–°–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç</b> ‚Äì –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–°–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç', —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å.\n\n"
        "–ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞ –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
        parse_mode="HTML"
    )
async def help_handler(message: types.Message):
    if message.from_user.id in ADMIN_IDS or db_session.query(Admin).filter(Admin.id == message.from_user.id).first():
        await message.answer(
            "<b>–ü–æ–º–æ—â—å –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤</b>\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
            "üîß <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
            "1Ô∏è‚É£ /admin ‚Äì –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–∏–∫–µ—Ç–æ–≤.\n"
            "2Ô∏è‚É£ /closed_tickets ‚Äì –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤.\n"
            "3Ô∏è‚É£ /list_admins ‚Äì –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.\n\n"
            "\n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ø–æ–º–æ—â–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º.",
            parse_mode="HTML"
        )
    else:
        await message.answer(
            "<b>–ü–æ–º–æ—â—å</b>\n\n"
            "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ç–∏–∫–µ—Ç—ã –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
            "1Ô∏è‚É£ /start ‚Äì –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º.\n"
            "2Ô∏è‚É£ ‚úçÔ∏è <b>–°–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç</b> ‚Äì –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–°–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç', —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å.\n\n"
            "–ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞ –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
            parse_mode="HTML"
        )





TICKETS_PER_PAGE = 5  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∏–∫–µ—Ç–æ–≤ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ


if __name__ == "__main__":
    import asyncio

    async def main():
        print("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è...")
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ–Ω—é
        await set_default_menu()
        await set_main_admin_menu()
        await set_admin_menu()
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        await dp.start_polling(bot)

    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.")





if __name__ == "__main__":
    import asyncio

    async def main():
        print("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è...")

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ–Ω—é –∫–æ–º–∞–Ω–¥
        await set_default_menu()        # –ú–µ–Ω—é –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        await set_admin_menu()          # –ú–µ–Ω—é –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        await set_main_admin_menu()     # –ú–µ–Ω—é –¥–ª—è –≥–ª–∞–≤–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤

        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        await dp.start_polling(bot)

    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.")






if __name__ == "__main__":
    import asyncio

    try:
        print("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è...")  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
        asyncio.run(dp.start_polling(bot))
    except (KeyboardInterrupt, SystemExit):
        print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.")